#ifndef OPENHD_WIFI_H
#define OPENHD_WIFI_H

#include <fstream>
#include <string>

#include "openhd_platform.h"
#include "openhd_util.h"
#include "openhd_util_filesystem.h"
#include "validate_settings_helper.h"
#include "wifi_channel.h"

// After discovery, the capabilities of a WiFi-Card are immutable !

enum class WiFiCardType {
  Unknown = 0,
  Realtek8812au,
  Realtek8814au,
  Realtek88x2bu,
  Realtek8188eu,
  Atheros9khtc,
  Atheros9k,
  Ralink,
  Intel,
  Broadcom,
};

static std::string wifi_card_type_to_string(const WiFiCardType &card_type) {
  switch (card_type) {
	case WiFiCardType::Realtek8812au:return "Realtek8812au";
	case WiFiCardType::Realtek8814au:return  "Realtek8814au";
	case WiFiCardType::Realtek88x2bu:return  "Realtek88x2bu";
	case WiFiCardType::Realtek8188eu:return  "Realtek8188eu";
	case WiFiCardType::Atheros9khtc:return  "Atheros9khtc";
	case WiFiCardType::Atheros9k:return  "Atheros9k";
	case WiFiCardType::Ralink:return  "Ralink";
	case WiFiCardType::Intel:return  "Intel";
	case WiFiCardType::Broadcom:return  "Broadcom";
	default: return "unknown";
  }
}


struct WiFiCard {
  // These 3 are all (slightly different) identifiers of a card on linux.
  std::string device_name;
  std::string mac;
  // phy0, phy1,.., needed for iw commands that don't take the device name
  int phy80211_index =-1;
  // Name of the driver that runs this card.
  std::string driver_name;
  // Detected wifi card type, generated by checking known drivers.
  WiFiCardType type = WiFiCardType::Unknown;
  bool supports_monitor_mode=false;
  bool supports_injection = false;
  bool supports_hotspot = false;
  [[nodiscard]] bool supports_2GHz()const{
    return !supported_frequencies_2G.empty();
  };
  [[nodiscard]] bool supports_5GHz()const{
    return !supported_frequencies_5G.empty();
  };
  // supported 2G frequencies, in mhz
  std::vector<uint32_t> supported_frequencies_2G{};
  // supported 5G frequencies, in mhz
  std::vector<uint32_t> supported_frequencies_5G{};
  [[nodiscard]] std::vector<uint32_t> get_supported_frequencies_2G_5G()const{
    std::vector<uint32_t> ret{};
    OHDUtil::vec_append(ret,supported_frequencies_2G);
    OHDUtil::vec_append(ret,supported_frequencies_5G);
    return ret;
  };
};

// Only RTL8812au supports changing the MCS index
static bool wifi_card_supports_variable_mcs(const WiFiCard& wifi_card){
  if(wifi_card.type==WiFiCardType::Realtek8812au)return true;
  return false;
}
/**
 * @param m_broadcast_cards the cards to check capabilities from
 * @return true if all cards support setting an MCS index,
 */
static bool all_cards_support_setting_mcs_index(const std::vector<WiFiCard>& m_broadcast_cards){
  for(const auto& card: m_broadcast_cards){
	if(!wifi_card_supports_variable_mcs(card)){
	  return false;
	}
  }
  return true;
}

// Only RTL8812au so far supports a 40Mhz channel width (and there it is also discouraged to use it)
static bool wifi_card_supports_40Mhz_channel_width(const WiFiCard& wifi_card){
  if(wifi_card.type==WiFiCardType::Realtek8812au)return true;
  return false;
}

static bool wifi_card_supports_frequency(const WiFiCard& wifi_card,const uint32_t frequency){
  const auto channel_opt=openhd::channel_from_frequency(frequency);
  if(!channel_opt.has_value()){
    openhd::log::get_default()->debug("OpenHD doesn't know frequency {}",frequency);
    return false;
  }
  const auto& channel=channel_opt.value();
  for(const auto& supported_frequency:wifi_card.get_supported_frequencies_2G_5G()){
    if(channel.frequency==supported_frequency){
      return true;
    }
  }
  openhd::log::get_default()->debug("Card {} does not support frequency {}",wifi_card.device_name,frequency);
  return false;
}


static std::string debug_cards(const std::vector<WiFiCard>& cards){
  std::stringstream ss;
  ss<<"size:"<<cards.size()<<"{";
  for(const auto& card:cards){
    ss<<card.device_name <<",";
  }
  ss<<"}";
  return ss.str();
}

void write_wificards_manifest(const std::vector<WiFiCard> &cards);


#endif
