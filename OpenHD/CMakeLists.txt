cmake_minimum_required(VERSION 3.16.3)
project(OpenHD)

set(CMAKE_CXX_STANDARD 17)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

link_libraries(stdc++fs)

# See https://github.com/andrew-hardin/cmake-git-version-tracking
# This way we can track down bug reports to a commit hash and even more
# (OpenHD prints the stuff at startup)
include(FetchContent)
FetchContent_Declare(cmake_git_version_tracking
        GIT_REPOSITORY https://github.com/andrew-hardin/cmake-git-version-tracking.git
        GIT_TAG 904dbda1336ba4b9a1415a68d5f203f576b696bb
        )
FetchContent_MakeAvailable(cmake_git_version_tracking)

# https://stackoverflow.com/questions/58903269/cmake-prevent-building-test-executable-target-in-subdirectory-library-project
# Some of these subdirectories have a couple of test executables. They can be usefully for development,
# But if you only want to build OpenHD compiling them all is a huge hit on compile time.
# By using "EXCLUDE_FROM_ALL", if you invoke this CMakeLists.txt only the OpenHD main executable is built,
# and the test executables are skipped.
add_subdirectory(ohd_common)
add_subdirectory(ohd_interface EXCLUDE_FROM_ALL)
add_subdirectory(ohd_telemetry EXCLUDE_FROM_ALL)
add_subdirectory(ohd_video EXCLUDE_FROM_ALL)

# from https://mavlink.io/en/mavgen_c/
#You can supress the warnings in CMake using
add_compile_options(-Wno-address-of-packed-member -Wno-cast-align)

# Here we build the single executable that makes up OpenHD.
# It depends on all the libraries we have just added above
add_executable(openhd main.cpp)
target_link_libraries(openhd OHDInterfaceLib OHDVideoLib OHDTelemetryLib OHDCommonLib)
# Generated by cmake / cmake_git_version_tracking
target_link_libraries(openhd
        cmake_git_version_tracking
        )

# NOTE: We only install the OpenHD executable, the test_xxx execuatables are omitted
# For development, just clone and build OpenHD on the pi / platform itself
install(TARGETS openhd DESTINATION bin)