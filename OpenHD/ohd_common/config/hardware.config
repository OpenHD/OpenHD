# OpenHD hardware.
# Editing this file can break things - we only provide minimal support for custom setups that
# require editing this file
# Changes in this file also require a restart of OpenHD
# This file is overwritten when updating openhd

[wifi]
# Disable to manually specify how openhd should use the wifi cards in your system
WIFI_ENABLE_AUTODETECT = true
# The following variables are only used when ENABLE_AUTODETECT = false
# Interface name(s) of cards to use for wifibroadcast.
# AIR:  this must be exactly one card
# GROUND: you can specify more than one card, at least one is required
# transmission from ground to air is always done on the first card (the other cards only listen passively)
WIFI_WB_LINK_CARDS = wlan1
# Interface name of card to use for wifi hotspot, or empty if no card should be used for hotspot.
# Must not contain a card already used for wifibroadcast !
WIFI_WIFI_HOTSPOT_CARD =


[camera]
# Disable to manually specify what cameras openhd should use or when you want to use cameras that cannot be autodetected (e.g IP Cameras)
# or debug / develop camera(s) that are not fully integrated yet.
CAMERA_ENABLE_AUTODETECT = true
# The following variables are only used when ENABLE_AUTODETECT = false
# Use 1 if you only use a primary camera (CAM0), use 2 if you use a primary and secondary camera (CAM0 and CAM1)
CAMERA_N_CAMERAS = 1
# Available camera types are:
# 1) DUMMY_SW :
# a camera emulated fully in sw, usefully for development and debugging
# 2) CUSTOM_UNMANAGED_CAMERA
# This camera is for developing purposes and/or for users that want to create more or less esoteric camera pipelines, e.g. by using
# a custom script. In this mode, ohd_video acts as a completely agnostic passthrough for a camera stream that is neither managed
# by openhd main executable nor created by openhd main executable (note: by that you loose any openhd-provided functionalities,
# e.g. changing camera settings and/or parameters.
# To keep this API somewhat stable we only define the following:
# Data needs to be provided by feeding h264,h265 or mjpeg encapsulated in RTP to udp port localhost::5500 in case of primary camera and
# localhost::5501 in case of secondary camera
# In case any of the 2 cameras (primary or secondary) is set to custom unmanaged, the custom_unmanaged_camera.service is automatically
# started at boot (and executes whatever is written in the custom_unmanaged_camera.sh script in /boot/openhd/scripts/).
# Read the script to get you started how a camera pipeline might look like (e.g. for ip cam).
# Other options:
# Auto-detectable cameras. When CAMERA_ENABLE_AUTODETECT=false, they need to be explicitly specified !!! )
# OpenHD will wait for them to become available at boot
# 3) RPI_CSI_MMAL
# 4) RPI_CSI_VEYE_V4l2
# 5) RPI_CSI_LIBCAMERA
CAMERA_CAMERA0_TYPE = DUMMY_SW
CAMERA_CAMERA1_TYPE = DUMMY_SW

[network]
# OpenHD can control the ethernet connection via mavlink (wrapping network manager) but that only really serves a purpose on rpi as a ground station
# since on x86, people probably want to configure things themselves, e.g. via the ubuntu UI
# Valid values are:
# 1) RPI_ETHERNET_ONLY - default
# 2) The interface name of your ethernet card otherwise, e.g. eth0
NW_ETHERNET_CARD = RPI_ETHERNET_ONLY
# Specify additional IP address(es) the OpenHD ground unit should forward video and telemetry data to.
# Note that openhd already can detect externally connected devices, depending on how they are connected and what platform
# you are on. Only used on ground unit.
NW_MANUAL_FORWARDING_IPS =
# OpenHD automatically forwards primary and secondary video to localhost UDP 5600 and 5601 on ground.
# This option additionally also adds forwarding to 5800 (and 5801) of primary / secondary video
# Primary consumer of these stream(s) is the openhd web ui and its fpv preview (website)
# This additional forwarding consumes a bit more CPU and is not needed in all scenarios - therefore off by default
NW_FORWARD_TO_LOCALHOST_58XX = false

[generic]
# Generic stuff that doesn't really fit into those categories
# Enable encryption - by default, openhd only does (secure) packet validation.
# Encryption has a significant hit on CPU usage, and is therefore off by default -
# Note that even without encryption, listening in is hard unless you know the correct key(s)
# and attacks like controlling the drone via mavlink are not possible !
GEN_ENABLE_ENCRYPTION = false